{"version":3,"sources":["components/Layout/Layout.jsx","hoc/Aux.js","components/Burger/BurgerIngredients/BurgerIngredients.jsx","components/Burger/Burger.jsx","components/Burger/BuildControls/BuildControl/BuildControl.jsx","components/Burger/BuildControls/BuildControls.jsx","components/UI/Backdrop/Backdrop.jsx","components/UI/Modal/Modal.jsx","components/UI/Button/Button.jsx","components/Burger/OrderSummary/OrderSummary.jsx","container/BurgerBuilder/BurgerBuilder.js","App.js","serviceWorker.js","index.js"],"names":["layout","props","Fragment","children","aux","BurgerIngredient","ingredient","this","type","className","console","log","Component","burger","transformedIngredients","Object","keys","ingredients","map","igKey","Array","_","i","key","reduce","arr","el","concat","length","buildControl","label","onClick","removed","disabled","added","controls","buildControls","price","toFixed","ctrl","ingredientAdded","ingredientRemoved","purchasable","ordered","backdrop","show","clicked","modal","Aux","modalClosed","style","transform","opacity","button","Button","btnType","orderSummary","ingredientSummary","textTransform","purchaseCancelled","purchaseContinued","INGREDIENT_PRICES","salad","cheese","meat","bacon","BurgerBuilder","state","totalPrice","purchasing","addIngredientHandler","updatedCount","updatedIngredients","priceAddition","newPrice","setState","updatePurchaseState","removeIngredientHandler","oldCount","priceDeduction","purchaseHandler","purchaseCancelHandler","purchaseContinueHandler","alert","sum","disabledInfo","OrderSummary","App","Layout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1a80c33e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst layout = (props) => {\n  return (\n    <React.Fragment>\n      <div> toolbar sidebar backdrop</div>\n      <main>{props.children}</main>\n    </React.Fragment>\n  );\n};\n\nexport default layout;\n","const aux = (props) => props.children;\n\nexport default aux;","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./BurgerIngredients.css\";\n\nclass BurgerIngredient extends Component {\n  render() {\n    let ingredient = null;\n\n    switch (this.props.type) {\n      case \"bread-bottom\":\n        ingredient = <div className=\"BreadBottom\"></div>;\n        break;\n      case \"bread-top\":\n        ingredient = (\n          <div className=\"BreadTop\">\n            <div className=\"Seeds1\"></div>\n            <div className=\"Seeds2\"></div>\n          </div>\n        );\n        break;\n      case \"meat\":\n        ingredient = <div className=\"Meat\"></div>;\n        break;\n      case \"cheese\":\n        ingredient = <div className=\"Cheese\"></div>;\n        break;\n      case \"bacon\":\n        ingredient = <div className=\"Bacon\"></div>;\n        break;\n      case \"salad\":\n        ingredient = <div className=\"Salad\"></div>;\n        break;\n      default:\n        ingredient = null;\n    }\n    console.log(ingredient);\n    return ingredient;\n  }\n}\n\nBurgerIngredient.propTypes = {\n  type: PropTypes.string.isRequired,\n};\n\nexport default BurgerIngredient;\n","import React from \"react\";\n\nimport \"./Burger.css\";\nimport BurgerIngredient from \"./BurgerIngredients/BurgerIngredients\";\n\nconst burger = (props) => {\n  let transformedIngredients = Object.keys(props.ingredients)\n    .map((igKey) => {\n      return [...Array(props.ingredients[igKey])].map((_, i) => {\n        return <BurgerIngredient key={igKey + i} type={igKey} />;\n      });\n    })\n    .reduce((arr, el) => {\n      return arr.concat(el);\n    }, []);\n  if (transformedIngredients.length === 0) {\n    transformedIngredients = <p>Please start adding ingredients!</p>;\n  }\n  //   console.log(transformedIngredients);\n  return (\n    <div className=\"Burger\">\n      <BurgerIngredient type=\"bread-top\" />\n      {transformedIngredients}\n      <BurgerIngredient type=\"bread-bottom\" />\n    </div>\n  );\n};\n\nexport default burger;\n","import React from \"react\";\n\nimport \"./BuildControl.css\";\n\nconst buildControl = (props) => (\n  <div className=\"BuildControl\">\n    <div className=\"Label\">{props.label}</div>\n    <button className=\"Less\" onClick={props.removed} disabled={props.disabled}>\n      Less\n    </button>\n    <button className=\"More\" onClick={props.added}>\n      More\n    </button>\n  </div>\n);\n\nexport default buildControl;\n","import React from \"react\";\n\nimport \"./BuildControls.css\";\nimport BuildControl from \"./BuildControl/BuildControl\";\n\nconst controls = [\n  { label: \"Salad\", type: \"salad\" },\n  { label: \"Bacon\", type: \"bacon\" },\n  { label: \"Cheese\", type: \"cheese\" },\n  { label: \"Meat\", type: \"meat\" },\n];\n\nconst buildControls = (props) => (\n  <div className=\"BuildControls\">\n    <p>\n      Current Price: <strong>{props.price.toFixed(2)}</strong>\n    </p>\n    {controls.map((ctrl) => (\n      <BuildControl\n        key={ctrl.label}\n        label={ctrl.label}\n        added={() => props.ingredientAdded(ctrl.type)}\n        removed={() => props.ingredientRemoved(ctrl.type)}\n        disabled={props.disabled[ctrl.type]}\n      />\n    ))}\n    <button\n      className=\"OrderButton\"\n      disabled={!props.purchasable}\n      onClick={props.ordered}\n    >\n      ORDER NOW\n    </button>\n  </div>\n);\n\nexport default buildControls;\n","import React from \"react\";\n\nimport \"./Backdrop.css\";\n\nconst backdrop = (props) =>\n  props.show ? <div className=\"Backdrop\" onClick={props.clicked}></div> : null;\n\nexport default backdrop;\n","import React from \"react\";\n\nimport \"./Modal.css\";\nimport Aux from \"../../../hoc/Aux\";\nimport Backdrop from \"../Backdrop/Backdrop\";\n\nconst modal = (props) => (\n  <Aux>\n    <Backdrop show={props.show} clicked={props.modalClosed} />\n    <div\n      className=\"Modal\"\n      style={{\n        transform: props.show ? \"translateY(0)\" : \"translateY(-100vh)\",\n        opacity: props.show ? \"1\" : \"0\",\n      }}\n    >\n      {props.children}\n    </div>\n  </Aux>\n);\n\nexport default modal;\n","import React from \"react\";\n\nimport \"./Button.css\";\n\nconst button = (props) => {\n  const Button = \"Button\";\n  return (\n    <button className={Button + \" \" + props.btnType} onClick={props.clicked}>\n      {props.children}\n    </button>\n  );\n};\n\nexport default button;\n","import React from \"react\";\n\nimport Aux from \"../../../hoc/Aux\";\nimport Button from \"../../UI/Button/Button\";\n\nconst orderSummary = (props) => {\n  const ingredientSummary = Object.keys(props.ingredients).map((igKey) => {\n    return (\n      <li key={igKey}>\n        <span style={{ textTransform: \"capitalize\" }}>{igKey}</span>:{\" \"}\n        {props.ingredients[igKey]}\n      </li>\n    );\n  });\n\n  return (\n    <Aux>\n      <h3>Your Order</h3>\n      <p>A delicious burger with the following ingredients:</p>\n      <ul>{ingredientSummary}</ul>\n      <p>\n        <strong> Total Price :{props.price.toFixed(2)}</strong>\n      </p>\n      <p>Continue to Checkout?</p>\n      <Button btnType=\"Danger\" clicked={props.purchaseCancelled}>\n        CANCEL\n      </Button>\n      <Button btnType=\"Success\" clicked={props.purchaseContinued}>\n        CONTINUE\n      </Button>\n    </Aux>\n  );\n};\n\nexport default orderSummary;\n","import React, { Component } from \"react\";\n\nimport Aux from \"../../hoc/Aux\";\nimport Burger from \"../../components/Burger/Burger\";\nimport BuildControls from \"../../components/Burger/BuildControls/BuildControls\";\nimport Modal from \"../../components/UI/Modal/Modal\";\nimport OrderSummary from \"../../components/Burger/OrderSummary/OrderSummary\";\n\nconst INGREDIENT_PRICES = {\n  salad: 0.5,\n  cheese: 0.4,\n  meat: 1.3,\n  bacon: 0.7,\n};\n\nclass BurgerBuilder extends Component {\n  // constructor(props) {\n  //     super(props);\n  //     this.state = {...}\n  // }\n  state = {\n    ingredients: {\n      salad: 0,\n      bacon: 0,\n      cheese: 0,\n      meat: 0,\n    },\n    totalPrice: 4,\n    purchasable: false,\n    purchasing: false,\n  };\n\n  updatePurchaseState(ingredients) {\n    const sum = Object.keys(ingredients)\n      .map((igKey) => {\n        return ingredients[igKey];\n      })\n      .reduce((sum, el) => {\n        return sum + el;\n      }, 0);\n    this.setState({ purchasable: sum > 0 });\n  }\n\n  addIngredientHandler = (type) => {\n    const oldCount = this.state.ingredients[type];\n    const updatedCount = oldCount + 1;\n    const updatedIngredients = {\n      ...this.state.ingredients,\n    };\n    updatedIngredients[type] = updatedCount;\n    const priceAddition = INGREDIENT_PRICES[type];\n    const oldPrice = this.state.totalPrice;\n    const newPrice = oldPrice + priceAddition;\n    this.setState({ totalPrice: newPrice, ingredients: updatedIngredients });\n    this.updatePurchaseState(updatedIngredients);\n  };\n\n  removeIngredientHandler = (type) => {\n    const oldCount = this.state.ingredients[type];\n    if (oldCount <= 0) {\n      return;\n    }\n    const updatedCount = oldCount - 1;\n    const updatedIngredients = {\n      ...this.state.ingredients,\n    };\n    updatedIngredients[type] = updatedCount;\n    const priceDeduction = INGREDIENT_PRICES[type];\n    const oldPrice = this.state.totalPrice;\n    const newPrice = oldPrice - priceDeduction;\n    this.setState({ totalPrice: newPrice, ingredients: updatedIngredients });\n    this.updatePurchaseState(updatedIngredients);\n  };\n\n  purchaseHandler = () => {\n    this.setState({ purchasing: true });\n  };\n\n  purchaseCancelHandler = () => {\n    this.setState({ purchasing: false });\n  };\n\n  purchaseContinueHandler = () => {\n    alert(\"You continue!\");\n  };\n\n  render() {\n    const disabledInfo = {\n      ...this.state.ingredients,\n    };\n    for (let key in disabledInfo) {\n      disabledInfo[key] = disabledInfo[key] <= 0;\n    }\n    // {salad: true, meat: false, ...}\n    return (\n      <Aux>\n        <Modal\n          show={this.state.purchasing}\n          modalClosed={this.purchaseCancelHandler}\n        >\n          <OrderSummary\n            ingredients={this.state.ingredients}\n            purchaseCancelled={this.purchaseCancelHandler}\n            purchaseContinued={this.purchaseContinueHandler}\n            price={this.state.totalPrice}\n          />\n        </Modal>\n        <Burger ingredients={this.state.ingredients} />\n        <BuildControls\n          ingredientAdded={this.addIngredientHandler}\n          ingredientRemoved={this.removeIngredientHandler}\n          disabled={disabledInfo}\n          purchasable={this.state.purchasable}\n          ordered={this.purchaseHandler}\n          price={this.state.totalPrice}\n        />\n      </Aux>\n    );\n  }\n}\n\nexport default BurgerBuilder;\n","import React from \"react\";\nimport Layout from \"./components/Layout/Layout\";\nimport BurgerBuilder from \"./container/BurgerBuilder/BurgerBuilder\";\nfunction App() {\n  return (\n    <div>\n      <Layout>\n        <BurgerBuilder />\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}